import datetime
import ckanext.ytp.comments.model as comment_model
import ckanext.ytp.comments.util as util
from ckan import logic
from pprint import pprint
import logging
import ckan.plugins.toolkit as toolkit
import ckan.plugins as p
from ckanext.ytp.comments import captcha
from ckan.lib.base import c, request
from ckan.common import config

log = logging.getLogger(__name__)

EMAIL_NOTIFY_OFFICIAL_COMMENT_CREATE = """Dear data.gov.ie Team,

A new comment has been posted on DATA.GOV.IE.

Subject: {2}
Comment: {0}

Click to view the thread at {1}

This mail was automatically generated by CKAN at data.gov.ie

Have a great day!
"""


def notify_official(dataset, usrobj, comment=False):
    '''
    Notify a CKAN user that a comment has been successfully created.
    '''
    # from pylons import config
    from ckan.common import config

    # if not tk.asbool(config.get('ckanext.datarequests.send_emails')):
    #     return
    site_url = config.get('ckan.site_url', '')
    request_dataset_url = site_url + "/dataset/" + dataset.name

    import ckan.lib.mailer

    email_dict = dict()
    email_dict['name'] = 'data.gov.ie'
    officials_emails = ['jodie@derilinx.com']

    if comment:
        email_dict['subject'] = "New Comment on a Dataset on data.gov.ie"
        email_dict['body'] = EMAIL_NOTIFY_OFFICIAL_COMMENT_CREATE.format(comment.comment, request_dataset_url, comment.subject)
    else:
        email_dict['subject'] = "no subject"
        email_dict['body'] = EMAIL_NOTIFY_OFFICIAL_STATUS_CREATE % request_dataset_url

    for email in officials_emails:
        if email:
            email_dict['email'] = email
            try:
                ckan.lib.mailer.mail_recipient(email_dict['name'], email_dict['email'],
                                               email_dict['subject'], email_dict['body'])
                log.info("Successfully notified official %s for dataset comment %s" % (email, dataset.id))
            except ckan.lib.mailer.MailerException:
                log.error("Failed to notify official %s for dataset comment %s" % (email, dataset.id))


def comment_create(context, data_dict):
    pprint(data_dict)
    pprint(context)
    model = context['model']
    user = context['user']
    package = context['package']

    if (not user) or (user != 'admin'):
        user = config.get('ckan.comments.annon_user')
        
    userobj = model.User.get('anonymous')

    logic.check_access("comment_create", context, data_dict)

    # Validate that we have the required fields.
    if not all([data_dict.get('comment')]):
        raise logic.ValidationError("Comment text is required")

    thread_id = data_dict.get('thread_id')

    if not thread_id:
        url = data_dict.get('url')
        if url:
            thread = comment_model.CommentThread.from_url(url)
            thread_id = thread.id if thread else None

    if not thread_id:
        raise logic.ValidationError("Thread identifier or URL is required")

    captcha.check(request, c)

    # Cleanup the comment
    cleaned_comment = util.clean_input(data_dict.get('comment'))

    # Create the object
    cmt = comment_model.Comment(thread_id=thread_id,

                                comment=cleaned_comment)
    print "Creating comment..."
    if userobj:
        cmt.user_id = userobj.id
    else:
        #annon_commenter user
        cmt.user_id = '203d79a3-c3c1-4f67-8cfc-eee4c9998787'
    print cmt.user_id
    cmt.subject = data_dict.get('subject', '')

    if 'creation_date' in context:
        cmt.creation_date = datetime.datetime.fromtimestamp(context['creation_date'])

    # Check if there is a parent ID and that it is valid
    # TODO, validity in this case includes checking parent is not
    # deleted.
    prt = data_dict.get('parent_id')
    if prt:
        parent = comment_model.Comment.get(prt)
        if parent:
            cmt.parent_id = parent.id

    # approval and spam checking removed

    model.Session.add(cmt)
    model.Session.commit()

    # Notify open data team

    notify_official(package, userobj, comment=cmt)

    return cmt.as_dict()
